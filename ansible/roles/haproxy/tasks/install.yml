---
- name: Check if Docker is installed
  ansible.builtin.package_facts:
    manager: auto
  register: pkg_info

- name: Install Docker dependencies
  ansible.builtin.include_tasks: install_docker.yml
  when: 
    - "'docker' not in pkg_info.packages"
    - haproxy_install_docker | bool

- name: Create HAProxy directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  loop:
    - "{{ haproxy_config_dir }}"
    - "{{ haproxy_data_dir }}"

- name: Create HAProxy configuration
  ansible.builtin.template:
    src: haproxy.cfg.j2
    dest: "{{ haproxy_config_dir }}/haproxy.cfg"
    owner: root
    group: root
    mode: '0644'
  notify: restart haproxy container

- name: Pull HAProxy Docker image
  community.docker.docker_image:
    name: "{{ haproxy_docker_image }}"
    tag: "{{ haproxy_docker_tag }}"
    source: pull
    force_source: "{{ haproxy_force_pull }}"
    state: present

- name: Create HAProxy Docker container
  community.docker.docker_container:
    name: "{{ haproxy_container_name }}"
    image: "{{ haproxy_docker_image }}:{{ haproxy_docker_tag }}"
    state: started
    restart_policy: "{{ haproxy_restart_policy }}"
    network_mode: "{{ haproxy_network_mode }}"
    ports:
      - "{{ haproxy_frontend_port }}:{{ haproxy_frontend_port }}"
      - "{{ haproxy_readonly_port }}:{{ haproxy_readonly_port }}"
      - "{{ haproxy_sticky_port }}:{{ haproxy_sticky_port }}"
      - "{{ haproxy_stats_port }}:{{ haproxy_stats_port }}"
    volumes:
      - "{{ haproxy_config_dir }}/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro"
    env:
      HAPROXY_STATS_PORT: "{{ haproxy_stats_port }}"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:{{ haproxy_stats_port }}/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      description: "HAProxy for PgBouncer proxying"
      version: "{{ haproxy_docker_tag }}"

- name: Wait for HAProxy container to be healthy
  ansible.builtin.wait_for:
    path: "{{ haproxy_data_dir }}/healthcheck"
    state: present
    timeout: 60
  async: 60
  poll: 5

- name: Check HAProxy container status
  community.docker.docker_container_info:
    name: "{{ haproxy_container_name }}"
  register: container_info

- name: Verify HAProxy stats endpoint
  ansible.builtin.uri:
    url: "http://{{ inventory_hostname }}:{{ haproxy_stats_port }}/"
    method: GET
    user: "{{ haproxy_stats_user }}"
    password: "{{ haproxy_stats_password }}"
    force_basic_auth: true
    status_code: 200
    timeout: 10
  register: haproxy_stats_test
  until: haproxy_stats_test.status == 200
  retries: 5
  delay: 5

- name: Get backend status
  ansible.builtin.uri:
    url: "http://{{ inventory_hostname }}:{{ haproxy_stats_port }}/;csv"
    method: GET
    user: "{{ haproxy_stats_user }}"
    password: "{{ haproxy_stats_password }}"
    force_basic_auth: true
    timeout: 10
  register: backend_status
  failed_when: false

- name: Display installation summary
  ansible.builtin.debug:
    msg: |
      HAProxy container successfully deployed!
      ========================================
      Container: {{ haproxy_container_name }}
      Image: {{ haproxy_docker_image }}:{{ haproxy_docker_tag }}
      Status: {{ container_info.container.State.Status }}
      Health: {{ container_info.container.State.Health.Status }}
      
      Access Points:
      - Read/Write: {{ inventory_hostname }}:{{ haproxy_frontend_port }}
      - Read-Only: {{ inventory_hostname }}:{{ haproxy_readonly_port }} 
      - Sticky Sessions: {{ inventory_hostname }}:{{ haproxy_sticky_port }}
      - Statistics: http://{{ inventory_hostname }}:{{ haproxy_stats_port }}/
      
      Backend Status: {{ backend_status.status }}